import java.util.ArrayList;
import java.util.List;

public class CombinationSum {
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        backtrack(results, new ArrayList<>(), candidates, target, 0);
        return results;
    }

    private void backtrack(List<List<Integer>> results, List<Integer> currentCombination, 
                           int[] candidates, int target, int start) {
        if (target == 0) {
            results.add(new ArrayList<>(currentCombination));
            return;
        }
        if (target < 0) {
            return; // If target is negative, no need to continue
        }
        
        for (int i = start; i < candidates.length; i++) {
            currentCombination.add(candidates[i]); // Include the candidate
            backtrack(results, currentCombination, candidates, target - candidates[i], i); // Recurse with the updated target
            currentCombination.remove(currentCombination.size() - 1); // Backtrack
        }
    }

    public static void main(String[] args) {
        CombinationSum cs = new CombinationSum();
        int[] candidates = {2, 3, 6, 7};
        int target = 7;
        List<List<Integer>> combinations = cs.combinationSum(candidates, target);
        System.out.println(combinations);
    }
}
